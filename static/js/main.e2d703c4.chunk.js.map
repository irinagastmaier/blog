{"version":3,"sources":["components/Navbar.module.scss","container/PostDetail.jsx","container/Posts.jsx","assets/img/logo.svg","components/Navbar.jsx","App.jsx","reportWebVitals.js","index.js","container/Posts.module.scss"],"names":["module","exports","postId","a","fetch","response","json","method","PostDetail","post","useState","showForm","setShowForm","updatedTitle","setUpdatedTitle","useQuery","id","fetchComments","data","isLoading","error","isError","deleteMutation","useMutation","deletePost","updateMutation","updatePost","toString","e","preventDefault","title","className","styles","container","style","color","paddingBottom","btn","onClick","mutate","isSuccess","onSubmit","type","name","onChange","target","value","pd","placeholder","body","map","comment","email","fetchPosts","pageNum","Posts","currentPage","setCurrentPage","selectedPost","setSelectedPost","queryClient","useQueryClient","staleTime","keepPreviousData","useEffect","nextPage","prefetchQuery","pages","btnCount","disabled","previousValue","Navbar","src","logo","alt","QueryClient","App","client","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e2d703c4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Navbar_container__VeJ04\",\"logo\":\"Navbar_logo__19oGG\"};","import { useState } from \"react\";\nimport { useQuery, useMutation } from \"react-query\";\nimport styles from \"./Posts.module.scss\";\n\nasync function fetchComments(postId) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/comments?postId=${postId}`\n  );\n  return response.json();\n}\n\nasync function deletePost(postId) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/postId/${postId}`,\n    { method: \"DELETE\" }\n  );\n  return response.json();\n}\n\nexport function PostDetail({ post }) {\n  const [showForm, setShowForm] = useState(false);\n  const [updatedTitle, setUpdatedTitle] = useState(\"\");\n  const { data, isLoading, error, isError } = useQuery(\n    [\"comments\", post.id],\n    () => fetchComments(post.id)\n  ); //passing array for the query key and treat as a dependency array --> when key changes, create a new query\n\n  const deleteMutation = useMutation(postId => deletePost(postId));\n  const updateMutation = useMutation(postId => updatePost(postId));\n\n  if (isLoading) return <h3>Loading...</h3>;\n\n  if (isError)\n    return (\n      <>\n        <h3>Oops, something went wrong</h3>\n        <p>{error.toString()}</p>\n      </>\n    );\n\n  const updatePost = async (e, postId) => {\n    e.preventDefault();\n    const response = await fetch(\n      `https://jsonplaceholder.typicode.com/postId/${postId}`,\n      { method: \"PATCH\", data: { title: updatedTitle } }\n    );\n    return response.json();\n  };\n\n  const grabValue = e => {\n    setUpdatedTitle({ ...updatedTitle, [e.target.name]: e.target.value });\n  };\n\n  return (\n    <div className={styles.container}>\n      <h3 style={{ color: \"#1d8dbe\", paddingBottom: \"0.5rem\" }}>\n        {post.title}\n      </h3>\n      <div>\n        <button\n          className={styles.btn}\n          onClick={() => deleteMutation.mutate(post.id)}\n        >\n          Delete\n        </button>\n        {deleteMutation.isError && <p style={{ color: \"red\" }}>Error</p>}\n        {deleteMutation.isLoading && (\n          <p style={{ color: \"purple\" }}>Deleting</p>\n        )}\n        {deleteMutation.isSuccess && <p style={{ color: \"green\" }}>Deleted</p>}\n        <button className={styles.btn} onClick={() => setShowForm(!showForm)}>\n          Update title\n        </button>\n        {showForm && (\n          <>\n            <form onSubmit={() => updateMutation.mutate(post.id)}>\n              <input\n                type='text'\n                name='title'\n                id='title'\n                onChange={grabValue}\n                className={styles.pd}\n                placeholder='type title'\n              />\n              <button type='submit' className={styles.btn}>\n                Submit\n              </button>\n            </form>\n          </>\n        )}\n      </div>\n      <p>{post.body}</p>\n      <h4>Comments</h4>\n      {data.map(comment => (\n        <li key={comment.id}>\n          {comment.email}: {comment.body}\n        </li>\n      ))}\n    </div>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { useQuery, useQueryClient } from \"react-query\";\nimport { PostDetail } from \"./PostDetail\";\nimport styles from \"./Posts.module.scss\";\n\nconst maxPostPage = 10;\n\nasync function fetchPosts(pageNum) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/posts?_limit=10&_page=${pageNum}`\n  );\n  return response.json();\n}\n\nexport function Posts() {\n  const [currentPage, setCurrentPage] = useState(1); //for this API the current page starts at 1\n  const [selectedPost, setSelectedPost] = useState(null);\n\n  const queryClient = useQueryClient();\n\n  const { data, isError, error, isLoading } = useQuery(\n    [\"posts\", currentPage],\n    () => fetchPosts(currentPage),\n    {\n      staleTime: 2000,\n      keepPreviousData: true,\n    }\n  ); //useQuery(key, async function, options)\n\n  useEffect(() => {\n    if (currentPage < maxPostPage) {\n      const nextPage = currentPage + 1;\n      queryClient.prefetchQuery([\"posts\", nextPage], () =>\n        fetchPosts(nextPage)\n      );\n    }\n  }, [currentPage, queryClient]);\n\n  if (isLoading) return <h3>Loading...</h3>; //show it everytime, doesn't matter if there is data on the cache\n\n  if (isError)\n    return (\n      <>\n        <h3>Oops, something went wrong</h3>\n        <p>{error.toString()}</p>\n      </>\n    );\n\n  return (\n    <div className={styles.container}>\n      <ul>\n        {data.map(post => (\n          <li\n            key={post.id}\n            className={styles.title}\n            onClick={() => setSelectedPost(post)}\n          >\n            {post.title}\n          </li>\n        ))}\n      </ul>\n      <div className={styles.pages}>\n        <button\n          className={styles.btnCount}\n          disabled={currentPage <= 1}\n          onClick={() => {\n            setCurrentPage(previousValue => previousValue - 1);\n          }}\n        >\n          Previous\n        </button>\n        <span>Page {currentPage}</span>\n        <button\n          className={styles.btnCount}\n          disabled={currentPage >= maxPostPage}\n          onClick={() => {\n            setCurrentPage(previousValue => previousValue + 1);\n          }}\n        >\n          Next\n        </button>\n      </div>\n      <hr />\n      {selectedPost && <PostDetail post={selectedPost} />}\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/logo.c37b8280.svg\";","import React from \"react\";\nimport logo from \"../assets/img/logo.svg\";\nimport styles from \"./Navbar.module.scss\";\n\nexport default function Navbar() {\n  return (\n    <div className={styles.container}>\n      <img src={logo} alt='logo' className={styles.logo} />\n    </div>\n  );\n}\n","//query\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\n//styles\nimport \"./assets/styles/scss/style.scss\";\n//components\nimport { Posts } from \"./container/Posts\";\nimport Navbar from \"./components/Navbar\";\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    // provide React Query client to App\n    <QueryClientProvider client={queryClient}>\n      <div className='App'>\n        <Navbar />\n        <Posts />\n      </div>\n      <ReactQueryDevtools />\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Posts_container__1zV2P\",\"title\":\"Posts_title__1WYM5\",\"pages\":\"Posts_pages__2zthf\",\"btnCount\":\"Posts_btnCount__3l8ER\",\"btn\":\"Posts_btn__326gW\",\"pd\":\"Posts_pd__2vopi\"};"],"sourceRoot":""}